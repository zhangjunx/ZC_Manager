<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans.xsd
	 http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/websocket
    http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd ">
	
	<!-- 自动扫描com.zr包下的spring注解   （包名和项目里的保持一致） -->
	<context:component-scan base-package="com.xr.dao"></context:component-scan>
	<context:component-scan base-package="com.xr.service"></context:component-scan>
	
	<!-- 表示去classes目录下查找数据库配置文件 -->
	 <bean id="DBconfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
				<value>classpath:loadParm.properties</value>
			</list>
		</property>
	</bean> 
	
	<!-- 把Druid的数据源对象交由spring管理 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />

		<!-- 初始化连接池中的连接数，默认为10 -->
		<property name="initialSize" value="50" />
		<!--连接池中保留的最大连接数。默认值: 100 -->
		<property name="maxActive" value="500" />
		<!-- 连接池中保留的最小连接数，默认为：10 -->
		<property name="minIdle" value="50" />
		
		<!-- 超过时间限制是否回收 -->  
        <property name="removeAbandoned" value="true" />  
        <!-- 超时时间；单位为秒。180秒=3分钟 -->  
        <property name="removeAbandonedTimeout" value="18000" /> 
        <!-- 关闭abanded连接时输出错误日志 -->  
        <property name="logAbandoned" value="true" />   
        <!-- 配置后，客户端在使用一个无效的连接时会先对该连接进行测试，如果发现该连接已经无效，则重新从连接池获取有效数据库连接来使用 -->
        <property name="validationQuery" value="select * from dual"/>
	</bean>
	
	<!-- mybatis的SqlSessionFactory交由spring管理 -->
	 <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<!-- 为SessionFactory注入数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!--加载mybatis的配置文件-->  
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- 包名和项目里的保持一致 -->
		<property name="typeAliasesPackage" value="com.xr.entity"></property> 
		<!-- 如果xml映射文件和映射接口在不同目录需要以下配置      （包名和项目里的保持一致） -->
		 <property name="mapperLocations" value="classpath:com/xr/mapping/*.xml"/> 
	 </bean> 
	  
	  <!-- 配置自动扫描mybatis的映射接口和映射文件 -->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 						<!-- 包名和项目里的保持一致 -->
		<property name="basePackage" value="com.xr.dao" />
		<property name="sqlSessionFactoryBeanName" value="sessionFactory" />
	 </bean>
	  
	  <!-- 声明式事务,1.配置事务管理器   注册事务管理器-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 2.配置事务范围 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="query*" propagation="SUPPORTS"  read-only="true" rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="get*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="out*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 开启事务注解驱动 -->
	  <tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 3.配置切入点，关联切入点与事务通知。 -->
	<aop:config>
		<aop:pointcut id="txPoint" expression="execution(* com.xr.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint" />
	</aop:config> 
	
	  <import resource="spring-job.xml"/>  
	
</beans>